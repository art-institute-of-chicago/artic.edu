/*
  @function colspan

  Returns a calc() that represents a column span

  Parameters:
  $number-of-columns - the number of columns you want to span
  $breakpoint - at which breakpoint
  $bump - if you want the colspan + an arbitrary number
  $inverse - if you want to return a negative number (to move things backwards)

  NB: only works with breakpoint names, not the +/- variants
*/
@use "sass:math";

@function colspan($number-of-columns:1, $breakpoint:'xsmall', $bump:0, $inverse:false) {
  @if map-has-key($breakpoints-with-directions, $breakpoint) {
    $this-bp-main-col-width: map-get($main-col-widths, $breakpoint);
    $this-bp-outer-gutter: map-get($outer-gutters, $breakpoint);
    $this-multiplier: 1;
    $this-calc: '';

    @if($inverse) {
      $this-multiplier: -1;
    }

    @if ($this-bp-main-col-width=='fluid') {
      @if (unit($this-bp-outer-gutter)=='vw') {
        // Outer gutters in vw

        // Whats the inner column?
        $this-calc: 100vw - $this-bp-outer-gutter - $this-bp-outer-gutter;
        // Get 1/58th of that
        $this-calc: math.div($this-calc, 58);

        @if ($number-of-columns >=1) {
          // Multiple CSS columns?
          $this-calc: $this-calc * $number-of-columns;
        }

        @if ($bump==0) {

          // If no bump, we can return just a vw number
          @if($inverse) {
            @return $this-calc * -1;
          }

          @else {
            @return $this-calc;
          }
        }

        @else {
          // If there is a bump, we need to return a calc
          $this-calc: '(#{$this-calc} + #{$bump})';

          @if($inverse) {
            $this-calc: '(#{$this-calc}) * -1';
          }

          @return calc(#{$this-calc});
        }
      }

      @else {
        // Outer gutters in px, means we always need to return a calc
        // so lets build it
        // Firstly, lets double the outer gutter
        $this-calc: $this-bp-outer-gutter + $this-bp-outer-gutter;
        // And then remove it from 100vw and divide by our 58 CSS cols
        $this-calc: '(100vw - #{$this-calc}) / 58';

        // If we need to span multiple CSS cols
        @if ($number-of-columns >=1) {
          $this-calc: '(#{$this-calc}) * #{$number-of-columns}';
        }

        // Is there a bump to add?
        @if($bump !=0) {
          $this-calc: '(#{$this-calc}) + #{$bump}';
        }

        // Do we need to inverse it?
        @if($inverse) {
          $this-calc: '(#{$this-calc}) * -1';
        }

        // Return the calc
        @return calc(#{$this-calc});
      }

    }

    @else {
      @return ((math.div($this-bp-main-col-width, 58) * $number-of-columns) + $bump) * $this-multiplier;
    }
  }

  @else {
    @warn "Unknown breakpoint `#{$breakpoints}` in $breakpoints-with-directions";
  }
}

/*
  @mixin grid-cols-to-colspan

  Returns the number of CSS columns to span to make a grid listing

  Parameters:
  $number-of-columns - how many grid columns there are, so for a 4 column grid listing, 4
  $breakpoint - maximum number of CSS columns in the container, defaults to 58
  $gutter-cols - number of CSS columns between each item

  So for a 3 column listing at xlarge:

  width: colspan(grid-cols-to-colspan(3), 'xlarge');

  And for a 3 column listing inside a left rail thats 38 CSS columns wide:

  width: colspan(grid-cols-to-colspan(3,38,1), xlarge);
  margin-left: colspan(1, xlarge);

  See: https://codepen.io/13twelve/pen/rYaZWG
*/
@function grid-cols-to-colspan($number-of-columns: 1, $container-max-cols: 58, $gutter-cols: 2) {
  @return math.div($container-max-cols - (($number-of-columns - 1) * $gutter-cols), $number-of-columns);
}

/*
  @mixin design-cols-to-colspan

  Returns the number of CSS columns to span for a 1/x design columns (typically 12 or 15)

  So to span 3 of 12 design columns at xlarge:

  width: colspan(design-cols-to-colspan(3), 'xlarge');
*/
@function design-cols-to-colspan($number-of-design-columns: 1, $total-design-cols: 12, $design-col-spans: 3, $gutter-cols: 2) {
  @return (($number-of-design-columns * $design-col-spans) + (($number-of-design-columns - 1) * $gutter-cols));
}

/*
  @mixin width

  Returns a width and a calc() to correctly span columns
  with breakpoint selection and optional bump value

  Parameters:
  $number-of-columns - the number of columns you want to span
  $breakpoint - at which breakpoint
  $bump - if you want the colspan + an arbitrary number

  NB: only works with breakpoint names, not the +/- variants
*/

@mixin width($number-of-columns:1, $breakpoint:'xsmall', $bump:0px) {
  width: colspan($number-of-columns, $breakpoint, $bump);
}

/*
  @mixin width-multi

  A mix of @mixin width and @mixin column. Pass a map of the number
  of columns to span at each breakpoint. Use when you don't need to
  float on the grid.

  Parameters:
  $colspans - scss map detailing how many design columns this column
  needs to span on each breakpoint. Omitting a breakpoint from the
  map will not set a width at that breakpoint.
  $bump - if you want the colspan + an arbitrary number

  ```scss
  $column-spans__list-articles: (
    xsmall: 3,
    small: 3,
    medium: 4,
    large: 4,
    xlarge: 3,
    xxlarge: 3
  );

  .list-articles__item {
    @include width-multi($column-spans__list-articles);
  }
  ```

  NB: only works with breakpoint names, not the +/- variants
*/

@mixin width-multi($colspans:false, $bump:0px) {
  @if $colspans {

    @each $name,
    $point in $breakpoints {
      $colspan: map-get($colspans, #{$name});

      @if $colspan {
        @include breakpoint('#{$name}') {
          @include width($colspan, #{$name}, $bump);
        }
      }
    }
  }
}

/*
  @mixin push

  Returns a margin-left and a calc() to correctly push
  a block a number of columns with breakpoint selection
  and optional bump value

  Parameters:
  $number-of-columns - the number of columns you want to push
  $breakpoint - at which breakpoint
  $bump - if you want the colspan + an arbitrary number

  NB: only works with breakpoint names, not the +/- variants
*/
@mixin push($number-of-columns:1, $breakpoint:'xsmall', $bump:0px, $in-container:false) {
  margin-left: colspan($number-of-columns, $breakpoint, $bump);
}

/*
  @mixin push-multi

  A mix of @mixin push and @mixin column. Pass a map of the number
  of columns to push at each breakpoint.

  Parameters:
  $colspans - scss map detailing how many design columns this column
  needs to push on each breakpoint. Omitting a breakpoint from the
  map will not set a width at that breakpoint.
  $bump - if you want the colspan + an arbitrary number

  ```scss
  $column-spans__list-articles: (
    xsmall: 3,
    small: 3,
    medium: 4,
    large: 4,
    xlarge: 3,
    xxlarge: 3
  );

  .list-articles__item {
    @include push-multi($column-spans__list-articles);
  }
  ```

  NB: only works with breakpoint names, not the +/- variants
*/

@mixin push-multi($colspans:false, $bump:0px) {
  @if $colspans {

    @each $name,
    $point in $breakpoints {
      $colspan: map-get($colspans, #{$name});

      @if $colspan {
        @include breakpoint('#{$name}') {
          @include push($colspan, #{$name}, $bump);
        }
      }
    }
  }
}

/*
  @mixin columns-container-flex

  Sets up columns container - flex version

  Parameters:
  none

  ```scss
  .list-articles {
    @include columns-container-flex;
  }
  ```
*/

@mixin columns-container-flex() {
  display: flex;
  flex-flow: row wrap;

  @each $name,
  $point in $breakpoints {
    @include breakpoint('#{$name}') {
      margin-left: math.div(map-get($inner-gutters, $name), -1);
    }
  }
}

/*
  @mixin column-flex

  Sets up single column

  Parameters:
  $colspans - scss map detailing how many design columns this column needs to span on each breakpoint

  ```scss
  $column-spans__list-articles: (
    xsmall: 3,
    small: 3,
    medium: 4,
    large: 4,
    xlarge: 3,
    xxlarge: 3
  );

  .list-articles__item {
    @include column-flex($column-spans__list-articles);
  }
  ```

  NB: only works with breakpoint names, not the +/- variants
*/

@mixin column-flex($colspans:false) {
  flex: 0 0 auto;

  @each $name,
  $point in $breakpoints {
    @include breakpoint('#{$name}') {
      @if $colspans {
        $colspan: map-get($colspans, #{$name});

        @if $colspan {
          width: colspan($colspan, #{$name});
        }
      }

      margin-left: map-get($inner-gutters, $name);
    }
  }
}